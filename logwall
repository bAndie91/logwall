#!/usr/bin/env perl

use Data::Dumper;
use Socket;
use POSIX qw/:sys_wait_h strftime locale_h setsid mkfifo/;
use Getopt::Long;
use constant { STAT_DEVNO=>0, STAT_INO=>1, STAT_MODE=>2, STAT_LINKS=>3, STAT_UID=>4, STAT_GID=>5, STAT_DEVIDENT=>6, STAT_SIZE=>7, STAT_ATIME=>8, STAT_MTIME=>9, STAT_CTIME=>10, STAT_PREFBLKSZ=>11, STAT_BLOCKS=>12, };
use JSON;
use Fcntl ':flock';
use Cwd;


@facnam = qw/kern user mail daemon auth syslog lpr news uucp cron authpriv ftp ntp audit alert clock local0 local1 local2 local3 local4 local5 local6 local7/;
$i = 0;
%facnum = map { $_=>$i++ } @facnam;
@sevnam = qw/emerg alert crit error warning notice info debug/;
$i = 0;
%sevnum = map { $_=>$i++ } @sevnam;
undef $i;
$sevnum{'panic'} = $sevnum{'emerg'};
$sevnum{'err'} = $sevnum{'error'};
$sevnum{'warn'} = $sevnum{'warning'};
%Names = ('severity' => \@sevnam, 'facility' => \@facnam, );
%Numbs = ('severity' => \%sevnum, 'facility' => \%facnum, );


$sock_listen = "/dev/log";
$sock_connect = "/dev/logwall";
$rules_file = "/etc/logwall/rules";
$stream_rules_file = "/etc/logwall/stream-rules";
$pid_file = "/var/run/logwall.pid";
$stats_file = "/var/run/shm/logwall-stats.json";
@fifo_listeners = ();
$quiet = 0;

Getopt::Long::Configure(qw/no_ignore_case/);
GetOptions(
    'l|listen=s'    => \$sock_listen,
    'c|connect=s'   => \$sock_connect,
    'r|rules=s'     => \$rules_file,
    'stream-rules=s'=> \$stream_rules_file,
    'P|pidfile=s'   => \$pid_file,
    'S|statsfile=s' => \$stats_file,
    'f|fifo=s@'     => \@fifo_listeners,
    'q|quiet'       => \$quiet,
    'help'          => sub {
    	print "Options:
 --listen, -l      Frontend socket to listen to syslog connections on ($sock_listen)
 --connect, -c     Backend socket to connect to real syslog daemon ($sock_connect)
 --rules, -r       File to read event-level rules from ($rules_file)
 --stream-rules    File to read stream-level rules from ($stream_rules_file)
 --pidfile, -P     File to write PID into ($pid_file)
 --statsfile, -S   File to write and update statistics in JSON format into ($stats_file)
 --fifo, -f        Fifo specifications to listen to raw log messages on
 --quiet, -q       Output less messages at start
";
    	exit;
    },
)
or die("Usage: $0 [-q] [-l <frontend socket>] [-c <backend socket>] [-f <fifo> [-f <fifo> ...]] [-r <rules file>] [-P <pid file>] [-S <stats file>]\n");



$0 = 'logwall ' . join(' ', @ARGV);
setlocale(LC_TIME, 'C');


sub merge_deep
{
	my $ref2 = $_[1];
	
	if(ref $ref2 eq '')
	{
		# Sum up old and new values
		$_[0] += $ref2;
	}
	elsif(ref $ref2 eq 'HASH')
	{
		if(ref $_[0] ne 'HASH')
		{
			$_[0] = {};
		}
		for my $key (keys %$ref2)
		{
			if($key ne '')  # Ignore empty keys
			{
				merge_deep($_[0]->{$key}, $ref2->{$key});
			}
		}
	}
	elsif(ref $ref2 eq 'ARRAY')
	{
		if(ref $_[0] ne 'ARRAY')
		{
			$_[0] = [];
		}
		# TODO
		# should the target array be appended/patched/overwritten?
		# now it's patched
		for my $idx (0..$#$ref2)
		{
			merge_deep($_[0]->[$idx], $ref2->[$idx]);
		}
	}
	else
	{
		merge_deep($_[0], $$ref2);
	}
}

sub addstats
{
	open my $fh, '+<', $stats_file;
	flock $fh, LOCK_EX;
	local $/ = undef;
	my $stats;
	eval {
		$stats = decode_json(<$fh> || '{}');
		1;
	} or $stats = {};
	seek $fh, 0, 0;
	merge_deep($stats, $_[0]);
	print {$fh} encode_json($stats);
	truncate $fh, tell $fh;
	close $fh;
}

sub replace_regexp
{
	my $repl;
	my %backref;
	my @grp;
	($repl, $backref{'&'}, $backref{'`'}, $backref{"'"}, $backref{'+'}, @grp) = @_;
	my $n = 0;
	map { $backref{++$n} = $_; } @grp;
	undef $n;
	$repl =~ s/(?'backslashes'(\\)*)((?'dollar'\$)(?'dollarchar'[\x26\x60\x27+1-9])|)/replace_regexp_inner_replacer($+{'backslashes'}, $+{'dollar'}, $+{'dollarchar'}, \%backref)/eg;
	return $repl;
}

sub replace_regexp_inner_replacer
{
	my $backslashes = shift;
	my $dollar = shift;
	my $dollarchar = shift;
	my $backref = shift;
	my $n_bs = length $backslashes;
	my $real_escape = $n_bs % 2 == 0;
	my $replacement;
	
	if($real_escape) { $replacement = "\\" x ($n_bs/2); }
	else { $replacement = "\\" x (($n_bs-1)/2); }
	if(length $dollar)
	{
		if($real_escape) { $replacement .= $backref->{$dollarchar}; }
		else { $replacement .= $dollar.$dollarchar; }
	}
	return $replacement;
}

sub resolvealias
{
	my $a = shift;
	$a = "sourcename" if $a eq "ident";
	$a = "severity" if $a eq "level";
	$a = "exe_$1" if $a =~ /^(owner|group|uid|gid)$/;
	$a = "proc_$1" if $a =~ /^p(owner|group|uid|gid)$/;
	return $a;
}

sub replace_templates
{
	my $strRef = shift;
	my $varRef = shift;
	my $codeRef = shift;
	if(ref $codeRef ne 'CODE'){ $codeRef = sub{ return $_[0].$_[1]; }; }
	$$strRef =~ s/(.*?)\{\{(.+?)\}\}/$codeRef->($1, $varRef->{resolvealias($2)})/eg;
}

sub selflog
{
	# log ourself at syslog facility
	my $backend = shift;
	my $str = mklogline($facnum{'syslog'}, $_[0], strftime("%b %e %H:%M:%S", localtime), "logwall[$$]:", $_[1]);
	print STDERR $str if !$quiet;
	my $printerr = print {$backend} $str;
	
	addstats({
		'messages' => {
			'originated' => {
				'count' => 1,
				'facility' => {'syslog' => 1,},
				'severity' => {$sevnam[$_[0]] => 1,},
				'size' => {
					'total' => length $str,
					'message' => length $_[1],
				},
				'error' => ($printerr == 0 ? 1 : 0),
			},
		},
	});
}

sub mklogline
{
	my ($facility, $severity, $datetime, $tag, $msg) = @_;
	my $priority = ($facility << 3) + $severity;
	return sprintf "<$priority>%s %s%s\x00", $datetime, defined $tag ? "$tag " : "", $msg;
}

sub peerdata
{
	my $exe = "";
	my $argstr = "";
	my $comm = "";
	my @args;
	my ($realpid, $proc_uid, $proc_gid) = unpack('lll', getsockopt($_[0], SOL_SOCKET, SO_PEERCRED));
	
	if($realpid > 0)
	{
		$exe = readlink "/proc/$realpid/exe";
		
		open my $fh, '<', "/proc/$realpid/cmdline";
		$argstr .= $_ while <$fh>;
		close $fh;
		$argstr =~ s/\x00$//;
		@args = split /\x00/, $argstr;
		$argstr =~ s/\x00/ /g;
		$argstr =~ s/[^\x20-\x7E]/sprintf '\x%02X', ord$&/eg;
		
		open my $fh, '<', "/proc/$realpid/comm";
		$comm .= $_ while <$fh>;
		$comm =~ s/[\r\n]*$//;
		close $fh;
	}
	
	return ($realpid, $proc_uid, $proc_gid, $exe, $argstr, $comm, @args);
}

sub progname_from_tag
{
	my $tag = shift;
	my $progname = $tag;
	$progname =~ s{([^[:print:]]|[[:/]).*}{};  # Trim everything from the first non-printable or ":", "[", "/" char.
	return $progname;
}

sub pid_from_tag
{
	my $tag = shift;
	my ($pid) = ($tag =~ /\[(\d+)\]:?$/);
	return $pid;
}

sub apply_rewrites
{
	my $VarRef = shift;
	my $rwRef = shift;
	
	# Apply attribute rewrites
	for my $attr (qw/facility severity facility_name severity_name datetime pid msg/)
	{
		$VarRef->{$attr} = $rwRef->{$attr} if defined $rwRef->{$attr};
	}
	
	if(defined $rwRef->{'tag'})
	{
		$VarRef->{'tag'} = $rwRef->{'tag'};
	}
	else
	{
		if(defined $rwRef->{'sourcename'})
		{
			$VarRef->{'tag'} = $rwRef->{'sourcename'};
		}
		else
		{
			$VarRef->{'tag'} = $VarRef->{'sourcename'};
		}
		
		if(defined $rwRef->{'pid'})
		{
			$VarRef->{'tag'} .= '[' . $rwRef->{'pid'} . ']' if $rwRef->{'pid'} ne '';
		}
		elsif(defined $VarRef->{'pid'} and $VarRef->{'pid'} ne '')
		{
			$VarRef->{'tag'} .= '[' . $VarRef->{'pid'} . ']';
		}
		$VarRef->{'tag'} .= ':';
	}
	
	$VarRef->{'sourcename'} = progname_from_tag($VarRef->{'tag'});
	$VarRef->{'pid'} = pid_from_tag($VarRef->{'tag'});
}

sub process_rules
{
	my $backend = shift;
	my $rules = shift;
	my $rules_file = shift;
	my $EventVarRef = shift;
	my $TeeStackRef = shift;
	my @TeeStack = @$TeeStackRef;
	push @TeeStack, $Var{"tee"};
	my $pass = undef;
	my $nl = 0;
	
	seek $rules, 0, 0;
	local $/ = "\n";
	
	RULES:
	while(my $rule_line_rest = <$rules>)
	{
		$nl++;
		my %RuleVar = %$EventVarRef;
		
		TESTS:
		while(1)
		{
			if($rule_line_rest =~ /^\s*([a-z]+)(==|!=|=~|=\*|=|!~|!\*|>=|<=|>|<|:=|\^=|\+=|:~)("[^""]*"|\S*)/)
			{
				$rule_line_rest = $';
				my ($test, $op, $value) = ($1, $2, $3);
				$value = $1 if $value =~ /^"([^""]*)"$/;
				$test = resolvealias(lc $test);
				
				# Convert string-represented facility/severity to facility/severity number
				if($test ~~ ['facility', 'severity'] and $value !~ /^\d+$/)
				{
					if(not exists $Numbs{$test}->{$value})
					{
						selflog $backend, $sevnum{'err'}, "invalid $test name '$value' on line $nl";
						next TESTS;
					}
					$value = $Numbs{$test}->{$value};
				}
				
				
				# Evaluate test expression
				my $evaled_testexpr = 0;
				
				if($test ~~ ['then', 'jump', 'action'])
				{
					$value = lc $value;
					if($value eq 'drop') { $pass = 0; goto RULE_MATCHED; }
					elsif($value eq 'accept') { $pass = 1; goto RULE_MATCHED; }
					else { selflog $backend, $sevnum{'err'}, "keyword '$test' takes 'drop' or 'accept' on line $nl"; }
				}
				
				if($test eq 'log' and !$evaled_testexpr)
				{
					my @all = qw/realpid proc_uid proc_gid proc_owner proc_group exe comm args exe_uid exe_gid exe_owner exe_group facility_name severity_name tag sourcename pid fifonick tee/;
					my ($value, $logprefix) = split ';', $value, 2;
					my ($wlevel, @attrs) = split ',', $value;
					if($wlevel !~ /^\d+$/)
					{
						if(not exists $sevnum{$wlevel})
						{
							selflog $backend, $sevnum{'err'}, "invalid severity name '$wlevel' on line $nl";
							next TESTS;
						}
						$wlevel = $sevnum{$wlevel};
					}
					
					if(not @attrs)
					{
						@attrs = @all;
					}
					else
					{
						my @newattrs;
						for my $attr (@attrs)
						{
							if($attr eq 'ALL') { push @newattrs, @all; }
							elsif($attr =~ /^-(.+)/)
							{
								my $ex = resolvealias($1);
								@newattrs = grep { $_ ne $ex; } @newattrs;
							}
							else
							{
								push @newattrs, resolvealias($attr);
							}
						}
						@attrs = @newattrs;
					}
					
					selflog $backend, $wlevel, $logprefix . join ' ', map
					{
						my $str = $RuleVar{$_};
						if($str =~ /[ \x22\x5C]/)
						{
							$str =~ s/[\x22\x5C]/\\$&/g;
							$str = "\"$str\"";
						}
						sprintf "%s=%s", $_, $str;
					}@attrs;
					
					$evaled_testexpr = 1;
				}
				
				if($test =~ /^(exe|proc_owner|proc_group|exe_owner|exe_group|tag|sourcename|msg|comm|args|fifonick|tee)$/ and !$evaled_testexpr)
				{
					$evaled_testexpr = 1;
					if($op eq '==')    { goto RULE_DID_NOT_MATCH unless $RuleVar{$test} eq $value; }
					elsif($op eq '!=') { goto RULE_DID_NOT_MATCH unless $RuleVar{$test} ne $value; }
					elsif($op eq '=~') { goto RULE_DID_NOT_MATCH unless $RuleVar{$test} =~ /$value/; }
					elsif($op eq '=*') { goto RULE_DID_NOT_MATCH unless $RuleVar{$test} =~ /$value/i; }
					elsif($op eq '!~') { goto RULE_DID_NOT_MATCH unless $RuleVar{$test} !~ /$value/; }
					elsif($op eq '!*') { goto RULE_DID_NOT_MATCH unless $RuleVar{$test} !~ /$value/i; }
					elsif($op ~~ [':=', '^=', '+=', ':~'])
					{
						if($test =~ /^(tag|sourcename|msg)$/)
						{
							my %rwVar;
							
							if($op eq ':~')
							{
								my ($patt, $repl) = split '~', $value, 2;
								replace_templates(\$repl, \%RuleVar, sub {
									my ($prestr, $tmplvar) = @_;
									$prestr =~ s/\\+$/$&$&/;  # escape backslashes directly preceeding a template variable
									$tmplvar =~ s/[\$\\]/\\$&/g;  # escape dollar and backslashe chars in resolved variable to prevent expanding them as dollar-meta-chars
									return $prestr.$tmplvar;
								});
								my $newvalue = $RuleVar{$test};
								$newvalue =~ s{$patt}{replace_regexp($repl, $&, $`, $', $+, $1, $2, $3, $4, $5, $6, $7, $8, $9)}eg;
								$rwVar{$test} = $newvalue;
							}
							else
							{
								my $newvalue = $value;
								replace_templates(\$newvalue, \%RuleVar);
								
								$rwVar{$test} = $newvalue if $op eq ':=';
								$rwVar{$test} = $newvalue.$RuleVar{$test} if $op eq '^=';
								$rwVar{$test} = $RuleVar{$test}.$newvalue if $op eq '+=';
							}
							
							apply_rewrites(\%RuleVar, \%rwVar);
						}
						else
						{
							selflog $backend, $sevnum{'warn'}, "attribute '$test' is not rewritable on line $nl";
							$evaled_testexpr = 0;
						}
					}
					elsif($op eq '=' and $test eq 'tee')
					{
						if($value ~~ @TeeStack)
						{
							# Prevent Fork Bomb, ignore this tee.
						}
						else
						{
							my %TeeVar = %RuleVar;
							$TeeVar{"tee"} = $value;
							addstats({
								'messages' => {
									'originated' => {
										'count' => 1,
										'size' => {
											'total' => length mklogline($TeeVar{'facility'}, $TeeVar{'severity'}, $TeeVar{'datetime'}, $TeeVar{'tag'}, $TeeVar{'msg'}),
											'message' => length $TeeVar{"msg"},
										},
										'facility' => {$facnam[$TeeVar{"facility"}] => 1,},
										'severity' => {$sevnam[$TeeVar{"severity"}] => 1,},
										'fifo' => {$TeeVar{"fifonick"} => 1,},
									},
								},
							});
							my $rules_pos = tell $rules;
							process_rules_and_send_log($backend, $rules, $rules_file, \%TeeVar, \@TeeStack);
							seek $rules, $rules_pos, 0;
						}
					}
					else
					{
						if($test ne 'tee')
						{
							selflog $backend, $sevnum{'err'}, "keyword '$test' takes string comparasion or rewrite operator, but '$op' was found on line $nl";
							goto RULE_DID_NOT_MATCH;
						}
						$evaled_testexpr = 0;
					}
				}
				
				if($test =~ /^(realpid|proc_uid|proc_gid|exe_uid|exe_gid|facility|severity|pid|tee)$/ and !$evaled_testexpr)
				{
					if($value !~ /^-?\d+$/)
					{
						if($test =~ /^p?([ug])id$/)
						{
							my $ent;
							if($1 eq 'u') { $ent = getpwnam $value; }
							else { $ent = getgrnam $value; }
							if(defined $ent)
							{
								$value = $ent->[2];
							}
							else
							{
								# Can not resolve user/group name.
								# Force fail this rule.
								goto RULE_DID_NOT_MATCH;
							}
						}
						elsif($test eq "tee")
						{
							selflog $backend, $sevnum{'err'}, "keyword '$test' with '$op' operator takes numeric right-value on line $nl";
							goto RULE_DID_NOT_MATCH;
						}
						else
						{
							selflog $backend, $sevnum{'err'}, "keyword '$test' takes numeric right-value on line $nl";
							goto RULE_DID_NOT_MATCH;
						}
					}
					
					if($op =~ /^(==|!=|>=|<=|>|<)$/)
					{
						$evaled_testexpr = 1;
						my $testint = int $RuleVar{$test};
						goto RULE_DID_NOT_MATCH unless eval qq{$testint $op $value};
					}
					elsif($op eq ':=')
					{
						my %rwVar;
						
						if($test ~~ ['facility', 'severity'])
						{
							$rwVar{$test} = $value;
							$rwVar{$test.'_name'} = $Names{$test}->[$value];
							$evaled_testexpr = 1;
						}
						elsif($test eq 'pid')
						{
							$rwVar{$test} = $value;
							$evaled_testexpr = 1;
						}
						else
						{
							selflog $backend, $sevnum{'warn'}, "attribute '$test' is not rewritable on line $nl";
						}
						
						if($evaled_testexpr)
						{
							apply_rewrites(\%RuleVar, \%rwVar);
						}
					}
					else
					{
						if($test eq 'tee')
						{
							selflog $backend, $sevnum{'err'}, "keyword 'tee' takes string or numeric comparasion operator or '=', but '$op' was found on line $nl";
						}
						else
						{
							selflog $backend, $sevnum{'err'}, "keyword '$test' takes numeric relation or ':=' operator, but '$op' was found on line $nl";
						}
						goto RULE_DID_NOT_MATCH;
					}
				}
				
				if($test =~ /^(terminator)$/ and !$evaled_testexpr)
				{
					if($op eq ':=')
					{
						my $unescape = $value;
						$unescape =~ s/\\x([[:xdigit:]]{2})/chr hex $1/eg;
						$RuleVar{$test} = $unescape;  # write directly to %RuleVar, safely bypassing apply_rewrites()
						$evaled_testexpr = 1;
					}
					else
					{
						selflog $backend, $sevnum{'warn'}, "attribute '$test' takes ':=' operator, but '$op' was found on line $nl";
						goto RULE_DID_NOT_MATCH;
					}
				}
				
				if(!$evaled_testexpr)
				{
					selflog $backend, $sevnum{'err'}, "bareword '$test' in $rules_file on line $nl";
					goto RULE_DID_NOT_MATCH;
				}
		    }
		    
		    else
		    {
				$rule_line_rest =~ s/\s*$//;
				$rule_line_rest =~ s/\s*(\x23.*)?$//;  # strip comments
				if(length $rule_line_rest)
				{
					selflog $backend, $sevnum{'err'}, "parse error in $rules_file on line $nl near '$rule_line_rest'";
					goto RULE_DID_NOT_MATCH;
				}
				goto RULE_MATCHED;
			}
		}
		
		RULE_MATCHED:
		apply_rewrites($EventVarRef, \%RuleVar);
		
		RULE_DID_NOT_MATCH:
		# Don't put back rewritten attributes to $EventVarRef; let %RuleVar overwritten by $EventVarRef next cycle.
		
		last RULES if defined $pass;
	}
	
	$pass = 1 if not defined $pass;
	return $pass;
}

sub process_rules_and_send_log
{
	if(process_rules(@_))
	{
		my $backend = shift;
		shift;
		shift;
		my $EventVarRef = shift;
		
		# Compose output log message.
		my $raw = mklogline($EventVarRef->{'facility'}, $EventVarRef->{'severity'}, $EventVarRef->{'datetime'}, $EventVarRef->{'tag'}, $EventVarRef->{'msg'});
		# Send to syslog daemon.
		my $printError = print {$backend} $raw;
		
		addstats({
			'messages' => {
				'forwarded' => {
					'count' => 1,
					'facility' => {$EventVarRef->{'facility_name'} => 1,},
					'severity' => {$EventVarRef->{'severity_name'} => 1,},
					'size' => {
						'total' => length $raw,
						'message' => length $EventVarRef->{'msg'},
					},
					'error' => ($printError == 0 ? 1 : 0),
				},
			},
		});
	}
}

sub logwall
{
	my $client = shift;
	my $backend;
	my $rules;
	my $stream_rules;
	my %PeerVar;
	for my $varname (qw/realpid proc_uid proc_gid exe args comm/)
	{
		$PeerVar{$varname} = shift;
	}
	# Note. $PeerVar{args} is the space-delimited string (argstr) containing arguments.
	# @args is the list of arguments 1-by-1 (unused).
	my @args = @_;
	if($PeerVar{"realpid"} !~ /^\d+$/)
	{
		# This is a Fifo connection, 
		# the 2nd arg is the Fifo's nick name, other args are undefined.
		$PeerVar{"fifonick"} = $PeerVar{"realpid"};
		$PeerVar{"realpid"} = 0;
	}
	else
	{
		$PeerVar{"fifonick"} = "";
	}
	
	addstats({'forks' => {'count' => 1,},});
	
	
	if(defined $PeerVar{"proc_uid"})
	{
		($PeerVar{"proc_owner"}) = getpwuid $PeerVar{"proc_uid"};
	}
	if(defined $PeerVar{"proc_gid"})
	{
		($PeerVar{"proc_group"}) = getgrgid $PeerVar{"proc_gid"};
	}
	if(defined $PeerVar{"exe"})
	{
		($PeerVar{"exe_uid"}, $PeerVar{"exe_gid"}) = ((stat $PeerVar{"exe"})[STAT_UID, STAT_GID]);
		($PeerVar{"exe_owner"}) = getpwuid $PeerVar{"exe_uid"};
		($PeerVar{"exe_group"}) = getgrgid $PeerVar{"exe_gid"};
	}
	
	if(defined $PeerVar{"comm"})
	{
		my $tmpstr = $PeerVar{"comm"};
		$tmpstr =~ s/[\x00]/ /g;
		$tmpstr =~ s/[\x0A\x0D]//g;
		$tmpstr =~ s/[^\x20-\x7E]/#/g;
		$0 = "logwall: ".$PeerVar{"realpid"}." ".$tmpstr;
	}
	elsif($PeerVar{"realpid"} > 0)
	{
		$0 = "logwall: ".$PeerVar{"realpid"};
	}
	# else: fifonick process title has been set earlier


	if(!socket($backend, AF_UNIX, SOCK_DGRAM, 0))
	{
		selflog $backend, $sevnum{'crit'}, $!;  # FIXME: $backend is undefined here
		return 0;
	}
	if(!connect($backend, $sock_connect_addr))
	{
		selflog $backend, $sevnum{'crit'}, $!;  # FIXME: $backend is undefined here
		return 0;
	}
	select $backend;
	$|++;
	select STDOUT;
	
	
	if(!open $stream_rules, '<', $stream_rules_file)
	{
		selflog $backend, $sevnum{'crit'}, "$stream_rules_file: $!";
		return 0;
	}
	my $stream_ok = process_rules($backend, $stream_rules, $stream_rules_file, \%PeerVar);
	close $stream_rules;
	
	if($stream_ok)
	{
		if(!open $rules, '<', $rules_file)
		{
			selflog $backend, $sevnum{'crit'}, "$rules_file: $!";
			return 0;
		}
		
		local $/;
		if(not defined $PeerVar{"terminator"})
		{
			if($PeerVar{"fifonick"} ne "") { $PeerVar{"terminator"} = "\n"; }
			else { $PeerVar{"terminator"} = "\x00"; }
		}
		$/ = $PeerVar{"terminator"};
		
		DATAGRAM:
		while(<$client>)
		{
			my %EventVar = %PeerVar;
			addstats({
				'messages' => {
					'received' => {
						'count' => 1,
						'size' => {'total' => length,},
					},
				},
			});
			
			PROCESS_MESSAGE:
			s/\Q$PeerVar{"terminator"}\E$//;
			
			if(/^<(?'priority'\d{1,3})>\s*(?'datetime'(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [ ]?0*([12]?[0-9]|3[01]) 0*(1?[0-9]|2[0-3])(:0*([1-5]?[0-9])){2})\s+(?'tag'\S+) / ||
			   /^<(?'priority'\d{1,3})>\s*(?'tag'\S+) /)
			{
				$EventVar{"msg"} = $';
				my $priority = $+{'priority'};
				$EventVar{"facility"} = $priority >> 3;
				$EventVar{"severity"} = $priority & 7;
				$EventVar{"datetime"} = $+{'datetime'} || strftime("%b %e %H:%M:%S", localtime);
				$EventVar{"tag"} = $+{'tag'};
				$EventVar{"sourcename"} = progname_from_tag($EventVar{"tag"});
				$EventVar{"pid"} = pid_from_tag($EventVar{"tag"});
				
				addstats({
					'messages' => {
						'received' => {
							'facility' => {$facnam[$EventVar{"facility"}] => 1,},
							'severity' => {$sevnam[$EventVar{"severity"}] => 1,},
							'size' => {'message' => length $EventVar{'msg'},},
						},
					},
				});
			}
			elsif($PeerVar{"fifonick"} ne "")
			{
				# Treat this line is a raw log message written to a Fifo.
				$EventVar{"msg"} = $_;
				$EventVar{"facility"} = $facnum{'user'};
				$EventVar{"severity"} = $sevnum{'notice'};
				$EventVar{"datetime"} = strftime("%b %e %H:%M:%S", localtime);
				$EventVar{"tag"} = "fifo-".$PeerVar{"fifonick"};
				$EventVar{"sourcename"} = "fifo-".$PeerVar{"fifonick"};
				$EventVar{"pid"} = '';
				
				addstats({
					'messages' => {
						'received' => {
							'fifo' => {$PeerVar{"fifonick"} => 1,},
							'size' => {'message' => length $EventVar{'msg'},},
						},
					},
				});
			}
			else
			{
				addstats({
					'messages' => {
						'received' => {
							'invalid' => 1,
							'size' => {'invalid' => length,},
						},
					},
				});
				
				s/[\r\n]/sprintf "\\x%02X", ord($&)/eg;
				selflog $backend, $sevnum{'error'}, "Invalid: $_\n";
				next;
			}
			
			$EventVar{"facility_name"} = $facnam[$EventVar{"facility"}];
			$EventVar{"severity_name"} = $sevnam[$EventVar{"severity"}];
			$EventVar{"tee"} = "";
			
			process_rules_and_send_log($backend, $rules, $rules_file, \%EventVar);
		}
	}
	
	shutdown $backend, 2;
	close $rules;
}

sub splitFifoSpec
{
	my ($nick, $owner, $group, $mode, $file) = split /:/, $_[0], 5;
	if($nick eq '') { ($nick) = $file =~ /([^\/]+)$/; }
	if($owner eq '') { $owner = $>; }
	if($group eq '') { ($group) = split ' ', $); }
	if($mode eq '') { $mode = 0666; } else { $mode = oct $mode; }
	if($owner =~ /^\d+$/) { $uid = $owner; }
	else { (undef, undef, $uid) = getpwnam $owner; }
	if($group =~ /^\d+$/) { $gid = $group; }
	else { (undef, undef, $gid) = getgrnam $group; }
	return ($nick, $uid, $gid, $mode, $file);
}


sub libercid
{
	for my $pid (keys %kids)
	{
		kill $_[0], $pid;
	}
	suicid();
}
sub bury
{
	for my $pid (keys %kids)
	{
		my $w = waitpid $pid, WNOHANG;
		delete $kids{$pid} if($w != 0);
	}
}
sub suicid
{
	unlink $pid_file if defined $pid_file;
	exit;
}
sub early_die
{
	print STDERR $_[0] if $quiet or $! == 0;
	print STDERR "$!\n";
	exit int $! if $! > 0;
	exit $_[1];
}
sub absolute_path
{
	return $_[0] if $_[0] =~ /^\//;
	return Cwd::getcwd . '/' . $_[0];
}



$sock_listen = absolute_path $sock_listen;
$sock_connect = absolute_path $sock_connect;
$rules_file = absolute_path $rules_file;
$stream_rules_file = absolute_path $stream_rules_file;
$pid_file = absolute_path $pid_file;
$stats_file = absolute_path $stats_file;


$str = "Stats: $stats_file: ";
print STDERR $str if !$quiet;
open($stats_file, '>>', $stats_file) or early_die $str;
print STDERR "Writeable\n" if !$quiet;
close $stats_file;

$sock_listen_addr = sockaddr_un($sock_listen);
$sock_connect_addr = sockaddr_un($sock_connect);

$str = "Ruleset: $rules_file: ";
print STDERR $str if !$quiet;
open($Rules_fd, '<', $rules_file) or early_die $str;
print STDERR "Exists\n" if !$quiet;
close $Rules_fd;

for my $fifospec (@fifo_listeners)
{
	my ($nick, $uid, $gid, $mode, $file) = splitFifoSpec($fifospec);
	if($nick !~ /^[a-z_]/i or $mode !~ /^\d*$/)
	{
		$! = 0;
		early_die "Invalid FIFO spec. Valid form: 'NICKNAME:OWNER:GROUP:MODE:FILEPATH', where NICKNAME must start with alphanum or empty, in latter case basename of FILEPATH will be used.", 1;
	}
	if(not defined $uid or not defined $gid)
	{
		$! = 0;
		early_die "Either Owner or Group is not exist", 1;
	}
	
	$str = "Fifo listener: $file: ";
	print STDERR $str if !$quiet;
	unlink $file if -p $file;
	mkfifo $file, $mode or early_die $str;
	chown $uid, $gid, $file or early_die $str;
	print STDERR "Created\n" if !$quiet;
}

$str = "Backend: $sock_connect: ";
print STDERR $str if !$quiet;
socket($backend, AF_UNIX, SOCK_DGRAM, 0) or early_die $str;
connect($backend, $sock_connect_addr) or early_die $str;
close $backend;
print STDERR "Tested\n" if !$quiet;

$str = "Frontend: $sock_listen: ";
print STDERR $str if !$quiet;
#socket($frontend, AF_UNIX, SOCK_DGRAM, 0) or early_die $str;
socket($frontend, AF_UNIX, SOCK_STREAM, 0) or early_die $str;
setsockopt($frontend, SOL_SOCKET, SO_PASSCRED, 1);
unlink($sock_listen) if -S $sock_listen;
bind($frontend, $sock_listen_addr) or early_die $str;
chmod(0666, $sock_listen) or warn ($quiet?$str:'')."$!\n";
chmod(0660, $sock_connect) or warn ($quiet?$str:'')."$!\n";
listen($frontend, SOMAXCONN) or early_die $str;
print STDERR "Listening\n" if !$quiet;


$fork = fork;
if($fork == 0)
{
	close STDIN;
	chdir "/";
	setsid();
	
	open $fh, '>', $pid_file;
	print $fh $$;
	close $fh;
	
	$SIG{'TERM'} = $SIG{'QUIT'} = $SIG{'INT'} = \&libercid;
	$SIG{'CHLD'} = \&bury;
	$SIG{'HUP'} = \&suicid;
	
	
	# Start FIFO listeners
	
	for my $fifospec (@fifo_listeners)
	{
		$fifo_kid = fork;
		if(not defined $fifo_kid)
		{
			warn "$!\n";
		}
		elsif($fifo_kid == 0)
		{
			undef %kids;
			undef $pid_file;
			my ($nick, undef, undef, undef, $file) = splitFifoSpec($fifospec);
			while(1)
			{
				$0 = "logwall: $nick (closed)";
				#my $openmode = '+<';  # non blocking, continue execution
				my $openmode = '<';  # blocking until someone write onto the fifo
				open my $client, $openmode, $file;
				$0 = "logwall: $nick (open)";
				logwall($client, $nick);
				close $client;
			}
			exit;
		}
		else
		{
			$kids{$fifo_kid} = 1;
		}
	}
	
	
	# Start Socket listener
	
   	ACCEPT:
		1 while not accept($client, $frontend);
		
		##<< Race-Condition >>##
		($realpid, $proc_uid, $proc_gid, $exe, $argstr, $comm, @args) = peerdata($client);
		
		$kid = fork;
		if(not defined $kid)
		{
			warn "$!\n";
		}
		elsif($kid == 0)
		{
			undef %kids;
			undef $pid_file;
			logwall($client, $realpid, $proc_uid, $proc_gid, $exe, $argstr, $comm, @args);
			close $client;
			exit;
		}
		else
		{
			$kids{$kid} = 1;
		}
	
	goto ACCEPT;
	exit;
}

print STDERR "logwall started, pid $fork\n" if !$quiet;

